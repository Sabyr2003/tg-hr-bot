import os
import random
import aiosmtplib
import logging
import sqlite3
from dotenv import load_dotenv
from email.message import EmailMessage
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    Application, ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, CallbackContext, ConversationHandler
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DB_PATH = "hr_bot.db"

# –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏ Jitsi Meet
def create_meeting_link():
    meeting_id = "".join(random.choices("abcdefghijklmnopqrstuvwxyz0123456789", k=10))
    return f"https://meet.jit.si/{meeting_id}"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.message.text == "–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é":
        link = create_meeting_link()
        await update.message.reply_text(f"üîó –í–∞—à–∞ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è: {link}")

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
MAIN_MENU = [["–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É"], ["–°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫", "–ü–æ–º–æ—â—å"], ["–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—é–º–µ", "–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é"]]
KEYBOARD = ReplyKeyboardMarkup(MAIN_MENU, resize_keyboard=True)


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
POSITION, SALARY, REGION = range(3)


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
def init_db():
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            telegram_id INTEGER UNIQUE,
            first_name TEXT,
            last_name TEXT,
            username TEXT
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS applications (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            position TEXT,
            salary INTEGER,
            region TEXT,
            FOREIGN KEY(user_id) REFERENCES users(id)
        )
    ''')
    conn.commit()
    conn.close()

init_db()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
def is_user_registered(telegram_id: int) -> bool:
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT id FROM users WHERE telegram_id = ?", (telegram_id,))
    user = cursor.fetchone()
    conn.close()
    return user is not None

# –ü–æ–ª—É—á–µ–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
def get_user_id(telegram_id: int) -> int:
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT id FROM users WHERE telegram_id = ?", (telegram_id,))
    user = cursor.fetchone()
    conn.close()
    return user[0] if user else None

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=KEYBOARD)

async def send_resume(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–∑—é–º–µ"""
    await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ—ë —Ä–µ–∑—é–º–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF –∏–ª–∏ DOCX.")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
async def register(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user

    if is_user_registered(user.id):
        await update.message.reply_text("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", reply_markup=KEYBOARD)
        return

    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute(
        "INSERT INTO users (telegram_id, first_name, last_name, username) VALUES (?, ?, ?, ?)",
        (user.id, user.first_name, user.last_name, user.username)
    )
    conn.commit()
    conn.close()

    await update.message.reply_text("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", reply_markup=KEYBOARD)

# –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É
async def submit_application(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not is_user_registered(update.effective_user.id):
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!", reply_markup=KEYBOARD)
        return ConversationHandler.END

    context.user_data["application"] = {}
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–æ–ª–∂–Ω–æ—Å—Ç—å:")
    return POSITION

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
async def process_position(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["application"]["position"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –∑–∞—Ä–ø–ª–∞—Ç—É:")
    return SALARY

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç—ã
async def process_salary(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    salary_text = update.message.text
    if not salary_text.isdigit():
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
        return SALARY

    context.user_data["application"]["salary"] = int(salary_text)
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–µ–≥–∏–æ–Ω:")
    return REGION

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
async def process_region(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["application"]["region"] = update.message.text
    user_id = get_user_id(update.effective_user.id)

    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute(
        "INSERT INTO applications (user_id, position, salary, region) VALUES (?, ?, ?, ?)",
        (user_id, context.user_data["application"]["position"], context.user_data["application"]["salary"], context.user_data["application"]["region"])
    )
    conn.commit()
    conn.close()

    await update.message.reply_text("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!", reply_markup=KEYBOARD)
    return ConversationHandler.END

# –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫
async def list_applications(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT position, salary, region FROM applications")
    applications = cursor.fetchall()
    conn.close()

    if not applications:
        await update.message.reply_text("–ó–∞—è–≤–æ–∫ –Ω–µ—Ç.", reply_markup=KEYBOARD)
        return

    text = "üìå –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫:\n\n"
    for position, salary, region in applications:
        text += f"üîπ {position} | üí∞ {salary} —Ç–µ–Ω–≥–µ | üìç {region}\n"

    await update.message.reply_text("–û—á–∏—Å—Ç–∫–∞ –∑–∞—è–≤–æ–∫: /clear_applications (–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—É)")

    await update.message.reply_text(text, reply_markup=KEYBOARD)

# –û—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫ (–¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É)
async def clear_applications(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    if user.username != "kinder_s_photo":
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("DELETE FROM applications")
    conn.commit()
    conn.close()

    await update.message.reply_text("‚úÖ –í—Å–µ –∑–∞—è–≤–∫–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text = update.message.text

    if text == "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è":
        await register(update, context)
    elif text == "–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É":
        await submit_application(update, context)
    elif text == "–°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫":
        await list_applications(update, context)
    elif text == "–ü–æ–º–æ—â—å":
        await update.message.reply_text("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /start, /register, /submit_application, /list_applications, /send_resume, /create_meeting_link", reply_markup=KEYBOARD)
    elif text == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—é–º–µ":
        await send_resume(update, context)
    elif text == "–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é":
        link = create_meeting_link()
        await update.message.reply_text(f"üîó –í–∞—à–∞ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è: {link}")
    else:
        await update.message.reply_text("–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.", reply_markup=KEYBOARD)

# üîπ –î–∞–Ω–Ω—ã–µ –¥–ª—è SMTP (–Ø–Ω–¥–µ–∫—Å)
SMTP_SERVER = "smtp.yandex.ru"
SMTP_PORT = 465
SMTP_EMAIL = "sabyrzakirov1@yandex.ru"
SMTP_PASSWORD = "opwdvkbswqhwrxpb"

# –ü–æ—á—Ç–∞ HR-–º–µ–Ω–µ–¥–∂–µ—Ä–∞
HR_EMAIL = "sabyrzakirov@gmail.com"

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—é–º–µ, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
RESUMES_FOLDER = "resumes"
os.makedirs(RESUMES_FOLDER, exist_ok=True)

async def send_email(file_path: str, file_name: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç HR-–º–µ–Ω–µ–¥–∂–µ—Ä—É –ø–∏—Å—å–º–æ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–æ–≤–æ–º —Ä–µ–∑—é–º–µ"""
    msg = EmailMessage()
    msg["From"] = SMTP_EMAIL
    msg["To"] = HR_EMAIL
    msg["Subject"] = "üì© –ù–æ–≤–æ–µ —Ä–µ–∑—é–º–µ"

    msg.set_content(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ,\n\n–ù–æ–≤–æ–µ —Ä–µ–∑—é–º–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:\nüìé {file_name}\nüìÇ –õ–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å: {file_path}")

    try:
        await aiosmtplib.send(msg, hostname=SMTP_SERVER, port=SMTP_PORT, use_tls=True, username=SMTP_EMAIL, password=SMTP_PASSWORD)
        print("üìß –†–µ–∑—é–º–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ HR-–º–µ–Ω–µ–¥–∂–µ—Ä—É!")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ e-mail: {e}")

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∑—é–º–µ
async def handle_document(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –ª–æ–∫–∞–ª—å–Ω–æ"""
    file = update.message.document
    file_name = file.file_name.lower()

    if not file_name.endswith(".pdf") and not file_name.endswith(".docx"):
        await update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ü—Ä–∏—à–ª–∏ PDF –∏–ª–∏ DOCX.")
        return

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
    new_file = await file.get_file()
    file_path = os.path.join(RESUMES_FOLDER, file_name)
    await new_file.download_to_drive(file_path)

    await update.message.reply_text(f"‚úÖ –†–µ–∑—é–º–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ!\nüì© –û—Ç–ø—Ä–∞–≤–ª—è–µ–º HR...")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º e-mail HR
    await send_email(file_path, file_name)

    await update.message.reply_text(f"üìß HR-–º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—é–º–µ!")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É$"), submit_application)],
        states={
            POSITION: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_position)],
            SALARY: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_salary)],
            REGION: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_region)],
        },
        fallbacks=[]
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("send_resume", send_resume))
    app.add_handler(CommandHandler("clear_applications", clear_applications))
    app.add_handler(conv_handler)
    app.add_handler(MessageHandler(filters.Document.ALL, handle_document))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, button_handler))

    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()
