import os
import random
import aiosmtplib
import logging
from dotenv import load_dotenv
from email.message import EmailMessage
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    Application, ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, CallbackContext, ConversationHandler
)

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

load_dotenv()
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

MAIN_MENU = [["–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é", "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—é–º–µ"]]
KEYBOARD = ReplyKeyboardMarkup(MAIN_MENU, resize_keyboard=True)

def create_meeting_link():
    meeting_id = "".join(random.choices("abcdefghijklmnopqrstuvwxyz0123456789", k=10))
    return f"https://meet.jit.si/{meeting_id}"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=KEYBOARD)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text = update.message.text
    if text == "–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é":
        link = create_meeting_link()
        await update.message.reply_text(f"üîó –í–∞—à–∞ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è: {link}")
    elif text == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—é–º–µ":
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ—ë —Ä–µ–∑—é–º–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF –∏–ª–∏ DOCX.")
    else:
        await update.message.reply_text("–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.", reply_markup=KEYBOARD)

SMTP_SERVER = "smtp.yandex.ru"
SMTP_PORT = 465
SMTP_EMAIL = "sabyrzakirov1@yandex.ru"
SMTP_PASSWORD = "opwdvkbswqhwrxpb"
HR_EMAIL = "sabyrzakirov@gmail.com"
RESUMES_FOLDER = "resumes"
os.makedirs(RESUMES_FOLDER, exist_ok=True)

async def send_email(file_path: str, file_name: str):
    msg = EmailMessage()
    msg["From"] = SMTP_EMAIL
    msg["To"] = HR_EMAIL
    msg["Subject"] = "üì© –ù–æ–≤–æ–µ —Ä–µ–∑—é–º–µ"
    msg.set_content(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ,\n\n–ù–æ–≤–æ–µ —Ä–µ–∑—é–º–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:\nüìé {file_name}\nüìÇ –õ–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å: {file_path}")
    try:
        await aiosmtplib.send(msg, hostname=SMTP_SERVER, port=SMTP_PORT, use_tls=True, username=SMTP_EMAIL, password=SMTP_PASSWORD)
        print("üìß –†–µ–∑—é–º–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ HR-–º–µ–Ω–µ–¥–∂–µ—Ä—É!")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ e-mail: {e}")

async def handle_document(update: Update, context: CallbackContext) -> None:
    file = update.message.document
    file_name = file.file_name.lower()
    if not file_name.endswith(".pdf") and not file_name.endswith(".docx"):
        await update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ü—Ä–∏—à–ª–∏ PDF –∏–ª–∏ DOCX.")
        return
    new_file = await file.get_file()
    file_path = os.path.join(RESUMES_FOLDER, file_name)
    await new_file.download_to_drive(file_path)
    await update.message.reply_text(f"‚úÖ –†–µ–∑—é–º–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ!\nüì© –û—Ç–ø—Ä–∞–≤–ª—è–µ–º HR...")
    await send_email(file_path, file_name)
    await update.message.reply_text(f"üìß HR-–º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—é–º–µ!")

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.Document.ALL, handle_document))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, button_handler))
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()
